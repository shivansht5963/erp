// File: accounts/__init__.py

// File: accounts/admin.py
from django.contrib import admin

from django.contrib import admin
from .models import CustomUser

admin.site.register(CustomUser)

// File: accounts/apps.py
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

// File: accounts/forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser  # your custom user model

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'first_name', 'last_name', 'password1', 'password2']

class CustomUserForm(forms.ModelForm):
    class Meta:
        model = CustomUser
        fields = '__all__'

// File: accounts/migrations/0001_initial.py
# Generated by Django 5.2.5 on 2025-08-10 12:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('FACULTY', 'Faculty')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

// File: accounts/migrations/0002_customuser_dob_customuser_phone_and_more.py
# Generated by Django 5.2.5 on 2025-08-10 14:18

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='dob',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='customuser',
            name='phone',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='role',
            field=models.CharField(choices=[('student', 'Student'), ('faculty', 'Faculty')], default='student', max_length=20),
        ),
    ]

// File: accounts/migrations/0003_customuser_address_alter_customuser_email_and_more.py
# Generated by Django 5.2.5 on 2025-08-11 17:04

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_customuser_dob_customuser_phone_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='address',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='email',
            field=models.EmailField(max_length=254, unique=True, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='role',
            field=models.CharField(choices=[('student', 'Student'), ('faculty', 'Faculty'), ('admin', 'Admin')], default='student', max_length=20),
        ),
    ]

// File: accounts/migrations/__init__.py

// File: accounts/models.py
from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils.translation import gettext_lazy as _

class CustomUser(AbstractUser):
    ROLE_CHOICES = (
        ('student', 'Student'),
        ('faculty', 'Faculty'),
        ('admin', 'Admin'),
    )

    email = models.EmailField(_('email address'), unique=True)
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='student')
    phone = models.CharField(max_length=15, blank=True, null=True)
    dob = models.DateField(blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'first_name', 'last_name']
    
    def __str__(self):
        return f"{self.email} ({self.get_role_display()})"
    
    def login(self):
        """Method for login functionality"""
        return self.is_active
    
    def logout(self):
        """Method for logout functionality"""
        pass

// File: accounts/tests.py
from django.test import TestCase

# Create your tests here.

// File: accounts/urls.py
from django.urls import path
from django.contrib.auth import views as auth_views
from .views import add_user

app_name = 'accounts'

urlpatterns = [
    path('login/', auth_views.LoginView.as_view(template_name='accounts/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('add/', add_user, name='add_user'),
]

// File: accounts/views.py
from django.shortcuts import render, redirect
from .forms import CustomUserForm

def add_user(request):
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('accounts:add_user')
    else:
        form = CustomUserForm()
    return render(request, 'accounts/add_user.html', {'form': form})

// File: attendance/__init__.py

// File: attendance/admin.py
from django.contrib import admin

from django.contrib import admin
from .models import Attendance, AttendanceReport

admin.site.register(Attendance)
admin.site.register(AttendanceReport)

// File: attendance/apps.py
from django.apps import AppConfig


class AttendanceConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'attendance'

// File: attendance/forms.py
from django import forms
from .models import Attendance, AttendanceReport

class AttendanceForm(forms.ModelForm):
    class Meta:
        model = Attendance
        fields = '__all__'

class AttendanceReportForm(forms.ModelForm):
    class Meta:
        model = AttendanceReport
        fields = '__all__'

// File: attendance/migrations/0001_initial.py
# Generated by Django 5.2.5 on 2025-08-11 17:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('exams', '0002_auto_20250811_2233'),
        ('faculty', '0002_auto_20250811_2233'),
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.BooleanField(default=False)),
                ('marked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='faculty.teacher')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.subject')),
            ],
            options={
                'unique_together': {('student', 'subject', 'date')},
            },
        ),
        migrations.CreateModel(
            name='AttendanceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_classes', models.IntegerField(default=0)),
                ('classes_attended', models.IntegerField(default=0)),
                ('attendance_percentage', models.FloatField(default=0.0)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.subject')),
            ],
            options={
                'unique_together': {('student', 'subject')},
            },
        ),
    ]

// File: attendance/migrations/0002_alter_attendance_subject_and_more.py
# Generated by Django 5.2.5 on 2025-08-12 06:07

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('attendance', '0001_initial'),
        ('faculty', '0003_subject'),
    ]

    operations = [
        migrations.AlterField(
            model_name='attendance',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.subject'),
        ),
        migrations.AlterField(
            model_name='attendancereport',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.subject'),
        ),
    ]

// File: attendance/migrations/__init__.py

// File: attendance/models.py
from django.db import models
from students.models import Student
from faculty.models import Subject
from faculty.models import Teacher

class Attendance(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    date = models.DateField()
    status = models.BooleanField(default=False)  # True for present, False for absent
    marked_by = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    
    class Meta:
        unique_together = ['student', 'subject', 'date']
    
    def __str__(self):
        return f"{self.student.roll_number} - {self.subject.code} - {self.date}"

class AttendanceReport(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    total_classes = models.IntegerField(default=0)
    classes_attended = models.IntegerField(default=0)
    attendance_percentage = models.FloatField(default=0.0)
    
    class Meta:
        unique_together = ['student', 'subject']
    
    def calculate_attendance(self):
        if self.total_classes > 0:
            self.attendance_percentage = (self.classes_attended / self.total_classes) * 100
        else:
            self.attendance_percentage = 0
    
    def save(self, *args, **kwargs):
        self.calculate_attendance()
        super().save(*args, **kwargs)
    
    def __str__(self):
        return f"{self.student.roll_number} - {self.subject.code} - {self.attendance_percentage:.2f}%"
// File: attendance/tests.py
from django.test import TestCase

# Create your tests here.

// File: attendance/urls.py
# attedance/urls.py
from django.urls import path

app_name = 'attendance'

urlpatterns = []
from .views import add_attendance, add_attendance_report

urlpatterns = [
	path('add/', add_attendance, name='add_attendance'),
	path('add_report/', add_attendance_report, name='add_attendance_report'),
]
// File: attendance/views.py
from django.shortcuts import render, redirect
from .forms import AttendanceForm, AttendanceReportForm

def add_attendance(request):
    if request.method == 'POST':
        form = AttendanceForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('attendance:add_attendance')
    else:
        form = AttendanceForm()
    return render(request, 'attendance/add_attendance.html', {'form': form})

def add_attendance_report(request):
    if request.method == 'POST':
        form = AttendanceReportForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('attendance:add_attendance_report')
    else:
        form = AttendanceReportForm()
    return render(request, 'attendance/add_attendance_report.html', {'form': form})

// File: erp/__init__.py

// File: erp/asgi.py
"""
ASGI config for erp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'erp.settings')

application = get_asgi_application()

// File: erp/settings.py
"""
Django settings for erp project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--bbi%qicp7qxrboal7&&r97w@=&%4$&t6d917+$ax_+p2(utcc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

import os
# TEMPLATES[0]['DIRS'] = [os.path.join(BASE_DIR, 'templates')]
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'accounts',
    'exams',
    'students',
    'faculty',
    'attendance',
    'fees',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'erp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'erp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# ERP/settings.py

# Tells Django to use your model for logins, signups, etc.
AUTH_USER_MODEL = 'accounts.CustomUser'

# Tells Django where to send users after they successfully log in.
LOGIN_REDIRECT_URL = 'home' # We will create a 'home' URL next.



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: erp/urls.py
"""
URL configuration for erp project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include


urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls', namespace='accounts')),
    path('attendance/', include('attendance.urls', namespace='attendance')),
    path('faculty/', include('faculty.urls', namespace='faculty')),
    path('fees/', include('fees.urls', namespace='fees')),
    path('exams/', include('exams.urls', namespace='exams')),
    path('students/', include('students.urls', namespace='students')),
]

// File: erp/views.py
# erp/views.py
from django.shortcuts import render

def index(request):
    return render(request, 'index.html')

// File: erp/wsgi.py
"""
WSGI config for erp project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'erp.settings')

application = get_wsgi_application()

// File: exams/__init__.py

// File: exams/admin.py
from django.contrib import admin
from .models import Subject, Marks
# Register your models here.

# admin.site.regis
# ter(Subject)
admin.site.register(Marks)
// File: exams/apps.py
from django.apps import AppConfig


class ExamsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'exams'

// File: exams/forms.py
from django import forms
from .models import Subject, Marks

class SubjectForm(forms.ModelForm):
    class Meta:
        model = Subject
        fields = '__all__'

class MarksForm(forms.ModelForm):
    class Meta:
        model = Marks
        fields = '__all__'

// File: exams/migrations/0001_initial.py
# Generated by Django 5.2.5 on 2025-08-10 12:32

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('semester', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Marks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_marks', models.FloatField()),
                ('semester_marks', models.FloatField()),
                ('total_marks', models.FloatField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.subject')),
            ],
        ),
    ]

// File: exams/migrations/0002_auto_20250811_2233.py
# Generated by Django 5.2.5 on 2025-08-11 17:03

from django.db import migrations, models
import django.db.models.deletion


def create_default_department(apps, schema_editor):
    Department = apps.get_model('faculty', 'Department')
    if not Department.objects.exists():
        Department.objects.create(name='Default Department')


def create_default_course(apps, schema_editor):
    Department = apps.get_model('faculty', 'Department')
    Course = apps.get_model('faculty', 'Course')
    if not Course.objects.exists():
        default_dept = Department.objects.first()
        if default_dept:
            Course.objects.create(name='Default Course', department=default_dept)


class Migration(migrations.Migration):

    dependencies = [
        ('exams', '0001_initial'),
        ('faculty', '0002_auto_20250811_2233'),
    ]

    operations = [
        migrations.RunPython(create_default_department),
        migrations.RunPython(create_default_course),
        migrations.AddField(
            model_name='subject',
            name='department',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='faculty.department'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subject',
            name='course',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='faculty.course'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subject',
            name='teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='faculty.teacher'),
        ),
    ]

// File: exams/migrations/0003_alter_marks_subject_delete_subject.py
# Generated by Django 5.2.5 on 2025-08-12 06:07

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('attendance', '0002_alter_attendance_subject_and_more'),
        ('exams', '0002_auto_20250811_2233'),
        ('faculty', '0003_subject'),
    ]

    operations = [
        migrations.AlterField(
            model_name='marks',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.subject'),
        ),
        migrations.DeleteModel(
            name='Subject',
        ),
    ]

// File: exams/migrations/__init__.py

// File: exams/models.py
from django.db import models
from students.models import Student
from faculty.models import Subject

class Marks(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    internal_marks = models.FloatField()
    semester_marks = models.FloatField()
    total_marks = models.FloatField(blank=True, null=True)

    def save(self, *args, **kwargs):
        self.total_marks = self.internal_marks + self.semester_marks
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.student.roll_number} - {self.subject.code}"

// File: exams/tests.py
from django.test import TestCase

# Create your tests here.

// File: exams/urls.py
# exams/urls.py
app_name = 'exams'
from django.urls import path
from .views import add_subject, add_marks

urlpatterns = [
    path('add_subject/', add_subject, name='add_subject'),
    path('add_marks/', add_marks, name='add_marks'),
]
// File: exams/views.py
from django.shortcuts import render, redirect
from .forms import SubjectForm, MarksForm

def add_subject(request):
    if request.method == 'POST':
        form = SubjectForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('exams:add_subject')
    else:
        form = SubjectForm()
    return render(request, 'exams/add_subject.html', {'form': form})

def add_marks(request):
    if request.method == 'POST':
        form = MarksForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('exams:add_marks')
    else:
        form = MarksForm()
    return render(request, 'exams/add_marks.html', {'form': form})

// File: faculty/__init__.py

// File: faculty/admin.py
from django.contrib import admin

from django.contrib import admin
from .models import Department, Course, Class, Teacher, Subject

admin.site.register(Department)
admin.site.register(Course)
admin.site.register(Class)
admin.site.register(Teacher)
admin.site.register(Subject)

// File: faculty/apps.py
from django.apps import AppConfig


class FacultyConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'faculty'

// File: faculty/forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm
from accounts.models import CustomUser
from .models import Teacher, Department, Course, Class

class TeacherRegistrationForm(UserCreationForm):
    department = forms.CharField(max_length=100)
    qualification = forms.CharField(max_length=100)
    contact_number = forms.CharField(max_length=15)
    join_date = forms.DateField(widget=forms.SelectDateWidget(years=range(1980, 2030)))

    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'password1', 'password2']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.role = 'teacher'
        if commit:
            user.save()
            Teacher.objects.create(
                user=user,
                department=self.cleaned_data['department'],
                qualification=self.cleaned_data['qualification'],
                contact_number=self.cleaned_data['contact_number'],
                join_date=self.cleaned_data['join_date']
            )
        return user

class DepartmentForm(forms.ModelForm):
    class Meta:
        model = Department
        fields = '__all__'

class CourseForm(forms.ModelForm):
    class Meta:
        model = Course
        fields = '__all__'

class ClassForm(forms.ModelForm):
    class Meta:
        model = Class
        fields = '__all__'

class TeacherForm(forms.ModelForm):
    class Meta:
        model = Teacher
        fields = '__all__'

// File: faculty/migrations/0001_initial.py
# Generated by Django 5.2.5 on 2025-08-10 16:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100)),
                ('qualification', models.CharField(max_length=100)),
                ('contact_number', models.CharField(max_length=15)),
                ('join_date', models.DateField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

// File: faculty/migrations/0002_auto_20250811_2233.py
# Generated by Django 5.2.5 on 2025-08-11 17:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('faculty', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.department')),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(max_length=10)),
                ('semester', models.IntegerField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.department')),
            ],
        ),
        migrations.AlterField(
            model_name='teacher',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.department'),
        ),
    ]

// File: faculty/migrations/0003_subject.py
# Generated by Django 5.2.5 on 2025-08-12 06:07

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('faculty', '0002_auto_20250811_2233'),
    ]

    operations = [
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('semester', models.IntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.department')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='faculty.teacher')),
            ],
        ),
    ]

// File: faculty/migrations/__init__.py

// File: faculty/models.py
from django.db import models
from accounts.models import CustomUser

class Department(models.Model):
    name = models.CharField(max_length=100)
    
    def __str__(self):
        return self.name
    
    def display_department(self):
        return self.name

class Course(models.Model):
    name = models.CharField(max_length=100)
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    
    def __str__(self):
        return f"{self.name} - {self.department.name}"
    
    def display_courses(self):
        return self.name

class Class(models.Model):
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    section = models.CharField(max_length=10)
    semester = models.IntegerField()
    
    def __str__(self):
        return f"{self.department.name} - Section {self.section} - Semester {self.semester}"
    
    def display_classes(self):
        return f"Section {self.section} - Semester {self.semester}"
    
    def display_student_per_class(self):
        from students.models import Student
        return Student.objects.filter(course__department=self.department, semester=self.semester).count()
    
    def display_courses_per_class(self):
        return Course.objects.filter(department=self.department).count()

class Subject(models.Model):
    name = models.CharField(max_length=100)
    code = models.CharField(max_length=20, unique=True)
    semester = models.IntegerField()
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    teacher = models.ForeignKey('Teacher', on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"{self.code} - {self.name}"

class Teacher(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    qualification = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=15)
    join_date = models.DateField()
    
    def __str__(self):
        return f"{self.user.get_full_name()} - {self.department.name}"
    
    def mark_attendance(self):
        """Method for marking attendance"""
        pass
    
    def prepare_report_card(self):
        """Method for preparing report cards"""
        pass
    
    def declare_result(self):
        """Method for declaring results"""
        pass

// File: faculty/tests.py
from django.test import TestCase

# Create your tests here.

// File: faculty/urls.py
from django.urls import path
from . import views
from .views import add_department, add_course, add_class, add_teacher

app_name = 'faculty'

urlpatterns = [
    path('register/', views.register_teacher, name='register_teacher'),
    path('add_department/', add_department, name='add_department'),
    path('add_course/', add_course, name='add_course'),
    path('add_class/', add_class, name='add_class'),
    path('add_teacher/', add_teacher, name='add_teacher'),
]

// File: faculty/views.py
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import TeacherRegistrationForm, DepartmentForm, CourseForm, ClassForm, TeacherForm

def register_teacher(request):
    if request.method == 'POST':
        form = TeacherRegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "Teacher registered successfully! You can now log in.")
            return redirect('login')  # login page from accounts app
    else:
        form = TeacherRegistrationForm()
    return render(request, 'faculty/register_teacher.html', {'form': form})

def add_department(request):
    if request.method == 'POST':
        form = DepartmentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('faculty:add_department')
    else:
        form = DepartmentForm()
    return render(request, 'faculty/add_department.html', {'form': form})

def add_course(request):
    if request.method == 'POST':
        form = CourseForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('faculty:add_course')
    else:
        form = CourseForm()
    return render(request, 'faculty/add_course.html', {'form': form})

def add_class(request):
    if request.method == 'POST':
        form = ClassForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('faculty:add_class')
    else:
        form = ClassForm()
    return render(request, 'faculty/add_class.html', {'form': form})

def add_teacher(request):
    if request.method == 'POST':
        form = TeacherForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('faculty:add_teacher')
    else:
        form = TeacherForm()
    return render(request, 'faculty/add_teacher.html', {'form': form})

// File: fees/__init__.py

// File: fees/admin.py

from django.contrib import admin
from .models import FeeCategory, FeeStructure, FeePayment, FeeReminder

admin.site.register(FeeCategory)
admin.site.register(FeeStructure)
admin.site.register(FeePayment)
admin.site.register(FeeReminder)

// File: fees/apps.py
from django.apps import AppConfig


class FeesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'fees'

// File: fees/forms.py
from django import forms
from .models import FeeCategory, FeeStructure, FeePayment, FeeReminder

class FeeCategoryForm(forms.ModelForm):
    class Meta:
        model = FeeCategory
        fields = '__all__'

class FeeStructureForm(forms.ModelForm):
    class Meta:
        model = FeeStructure
        fields = '__all__'

class FeePaymentForm(forms.ModelForm):
    class Meta:
        model = FeePayment
        fields = '__all__'

class FeeReminderForm(forms.ModelForm):
    class Meta:
        model = FeeReminder
        fields = '__all__'

// File: fees/migrations/0001_initial.py
# Generated by Django 5.2.5 on 2025-08-11 17:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FeeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Fee Categories',
            },
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('payment_method', models.CharField(blank=True, choices=[('cash', 'Cash'), ('card', 'Card'), ('upi', 'UPI'), ('netbanking', 'Net Banking'), ('other', 'Other')], max_length=20, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partially Paid'), ('paid', 'Paid'), ('overdue', 'Overdue')], default='pending', max_length=20)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
            ],
        ),
        migrations.CreateModel(
            name='FeeReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_date', models.DateField()),
                ('message', models.TextField()),
                ('sent', models.BooleanField(default=False)),
                ('sent_date', models.DateTimeField(blank=True, null=True)),
                ('fee_payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fees.feepayment')),
            ],
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(max_length=100)),
                ('semester', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('due_date', models.DateField()),
                ('academic_year', models.CharField(max_length=9)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fees.feecategory')),
            ],
        ),
        migrations.AddField(
            model_name='feepayment',
            name='fee_structure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fees.feestructure'),
        ),
    ]

// File: fees/migrations/__init__.py

// File: fees/models.py

from django.db import models
from django.utils import timezone
from students.models import Student

class FeeCategory(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    
    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name_plural = "Fee Categories"

class FeeStructure(models.Model):
    category = models.ForeignKey(FeeCategory, on_delete=models.CASCADE)
    course = models.CharField(max_length=100)
    semester = models.IntegerField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    due_date = models.DateField()
    academic_year = models.CharField(max_length=9)  # Format: 2023-2024
    
    def __str__(self):
        return f"{self.category.name} - {self.course} - Semester {self.semester} - {self.academic_year}"

class FeePayment(models.Model):
    PAYMENT_STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('partial', 'Partially Paid'),
        ('paid', 'Paid'),
        ('overdue', 'Overdue'),
    )
    
    PAYMENT_METHOD_CHOICES = (
        ('cash', 'Cash'),
        ('card', 'Card'),
        ('upi', 'UPI'),
        ('netbanking', 'Net Banking'),
        ('other', 'Other'),
    )
    
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    fee_structure = models.ForeignKey(FeeStructure, on_delete=models.CASCADE)
    amount_paid = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    payment_date = models.DateField(null=True, blank=True)
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHOD_CHOICES, null=True, blank=True)
    transaction_id = models.CharField(max_length=100, null=True, blank=True)
    payment_status = models.CharField(max_length=20, choices=PAYMENT_STATUS_CHOICES, default='pending')
    remarks = models.TextField(blank=True, null=True)
    
    def calculate_payment_status(self):
        if not self.amount_paid:
            if timezone.now().date() > self.fee_structure.due_date:
                return 'overdue'
            return 'pending'
        
        if self.amount_paid >= self.fee_structure.amount:
            return 'paid'
        else:
            if timezone.now().date() > self.fee_structure.due_date:
                return 'overdue'
            return 'partial'
    
    def save(self, *args, **kwargs):
        self.payment_status = self.calculate_payment_status()
        super().save(*args, **kwargs)
    
    def __str__(self):
        return f"{self.student.roll_number} - {self.fee_structure.category.name} - {self.payment_status}"

class FeeReminder(models.Model):
    fee_payment = models.ForeignKey(FeePayment, on_delete=models.CASCADE)
    reminder_date = models.DateField()
    message = models.TextField()
    sent = models.BooleanField(default=False)
    sent_date = models.DateTimeField(null=True, blank=True)
    
    def __str__(self):
        return f"Reminder for {self.fee_payment.student.roll_number} - {self.reminder_date}"

// File: fees/tests.py
from django.test import TestCase

# Create your tests here.

// File: fees/urls.py
# fees/urls.py
from django.urls import path
from .views import add_fee_category, add_fee_structure, add_fee_payment, add_fee_reminder

app_name = 'fees'

urlpatterns = [
    path('add_fee_category/', add_fee_category, name='add_fee_category'),
    path('add_fee_structure/', add_fee_structure, name='add_fee_structure'),
    path('add_fee_payment/', add_fee_payment, name='add_fee_payment'),
    path('add_fee_reminder/', add_fee_reminder, name='add_fee_reminder'),
]
// File: fees/views.py
from django.shortcuts import render, redirect
from .forms import FeeCategoryForm, FeeStructureForm, FeePaymentForm, FeeReminderForm

def add_fee_category(request):
    if request.method == 'POST':
        form = FeeCategoryForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('fees:add_fee_category')
    else:
        form = FeeCategoryForm()
    return render(request, 'fees/add_fee_category.html', {'form': form})

def add_fee_structure(request):
    if request.method == 'POST':
        form = FeeStructureForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('fees:add_fee_structure')
    else:
        form = FeeStructureForm()
    return render(request, 'fees/add_fee_structure.html', {'form': form})

def add_fee_payment(request):
    if request.method == 'POST':
        form = FeePaymentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('fees:add_fee_payment')
    else:
        form = FeePaymentForm()
    return render(request, 'fees/add_fee_payment.html', {'form': form})

def add_fee_reminder(request):
    if request.method == 'POST':
        form = FeeReminderForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('fees:add_fee_reminder')
    else:
        form = FeeReminderForm()
    return render(request, 'fees/add_fee_reminder.html', {'form': form})

// File: get_code_context.sh
#!/bin/bash

#!/usr/bin/env powershell
echo "Enter the directory path where you want to create code_context.txt:"
read -r project_dir

project_dir="${project_dir//\\//}"

if [ ! -d "$project_dir" ]; then
  echo "Error: Directory '$project_dir' not found."
  exit 1
fi

output_file="${project_dir}/code_context.txt"

if [ -f "$output_file" ]; then
  rm "$output_file"
fi

ignore_patterns=("static" "fonts" "images" "data" "json-excel-converter" "LICENSE" "data.json" "README.md" "*.db" "*.ico" "*.png" "*.jpg" "*.jpeg" "*.gif" "*.svg" "*.pyc" "__pycache__" "env" "node_modules" "package-lock.json" "package.json" "LICENSE" "*.ini" "*.toml" ".coveragerc" ".gitignore" ".travis.yml" "*.lock" "tests" "*.pdf" "dist" "*.json")

include_extensions=(".py" ".js" ".jsx" ".ts" ".tsx" ".html" ".css" ".json" ".php" ".c" ".cpp" ".java" ".sh")

read_files() {
  local dir="$1"
  for entry in "$dir"/*
  do
    should_ignore=false
    for ignore_pattern in "${ignore_patterns[@]}"; do
      if [[ "$entry" == *"$ignore_pattern" ]]; then
        should_ignore=true
        break
      fi
    done

    if $should_ignore; then
      continue
    fi

    if [ -d "$entry" ]; then
      read_files "$entry"
    elif [ -f "$entry" ]; then
      should_include=false
      for ext in "${include_extensions[@]}"; do
        if [[ "$entry" == *"$ext" ]]; then
          should_include=true
          break
        fi
      done

      if $should_include; then
        relative_path=${entry#"$project_dir/"}
        echo "// File: $relative_path" >> "$output_file"
        cat "$entry" >> "$output_file"
        echo "" >> "$output_file"
      else
        echo "Error: File extension not supported: $entry"
      fi
    fi
  done
}

read_files "$project_dir"
echo "Code context has been saved to ${output_file}"
// File: manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'erp.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

// File: students/__init__.py

// File: students/admin.py
from django.contrib import admin
from .models import Student
# Register your models here.

admin.site.register(Student)
// File: students/apps.py
from django.apps import AppConfig


class StudentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'students'

// File: students/forms.py
from django import forms
from .models import Student

class StudentForm(forms.ModelForm):
    dob = forms.DateField(
        widget=forms.DateInput(attrs={'type': 'date'}),  # calendar picker
        label="Date of Birth"
    )
    class Meta:
        model = Student
        fields = ['roll_number', 'course', 'semester', 'dob', 'contact_number']

// File: students/migrations/0001_initial.py
# Generated by Django 5.2.5 on 2025-08-10 12:32

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roll_number', models.CharField(max_length=20, unique=True)),
                ('course', models.CharField(max_length=100)),
                ('semester', models.IntegerField()),
                ('dob', models.DateField()),
                ('contact_number', models.CharField(max_length=15)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

// File: students/migrations/0002_student_address_alter_student_course_studentinfo.py
# Generated by Django 5.2.5 on 2025-08-11 17:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('faculty', '0002_auto_20250811_2233'),
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='student',
            name='address',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='student',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.course'),
        ),
        migrations.CreateModel(
            name='StudentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended_classes', models.IntegerField(default=0)),
                ('total_classes', models.IntegerField(default=0)),
                ('attendance_percentage', models.FloatField(default=0.0)),
                ('marks', models.FloatField(default=0.0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faculty.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
            ],
        ),
    ]

// File: students/migrations/__init__.py

// File: students/models.py
from django.db import models
from django.conf import settings
from faculty.models import Course, Class

class Student(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    roll_number = models.CharField(max_length=20, unique=True)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    semester = models.IntegerField()
    dob = models.DateField()
    contact_number = models.CharField(max_length=15)
    address = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.roll_number} - {self.user.first_name} {self.user.last_name}"
    
    def view_attendance(self):
        """Method to view student's attendance"""
        from attendance.models import AttendanceReport
        return AttendanceReport.objects.filter(student=self)
    
    def view_marks(self):
        """Method to view student's marks"""
        from exams.models import Marks
        return Marks.objects.filter(student=self)
    
    def communicate_with_teacher(self):
        """Method for student-teacher communication"""
        pass
    
    def communicate_with_other_student(self):
        """Method for student-student communication"""
        pass

class StudentInfo(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    attended_classes = models.IntegerField(default=0)
    total_classes = models.IntegerField(default=0)
    attendance_percentage = models.FloatField(default=0.0)
    marks = models.FloatField(default=0.0)
    
    def __str__(self):
        return f"{self.student.roll_number} - {self.course.name}"
    
    def display_attendance(self):
        """Method to display attendance"""
        if self.total_classes > 0:
            return f"{self.attendance_percentage:.2f}%"
        return "0.00%"
    
    def display_marks(self):
        """Method to display marks"""
        return f"{self.marks:.2f}"
    
    def save(self, *args, **kwargs):
        if self.total_classes > 0:
            self.attendance_percentage = (self.attended_classes / self.total_classes) * 100
        super().save(*args, **kwargs)

// File: students/tests.py
from django.test import TestCase

# Create your tests here.

// File: students/urls.py
# students/urls.py
from django.urls import path
from .views import add_student

app_name = 'students'
urlpatterns = [
    path('add/', add_student, name='add_student'),
]
// File: students/views.py
from accounts.forms import CustomUserCreationForm
from .forms import StudentForm
from django.contrib.auth import get_user_model
from django.contrib import messages
from django.contrib.auth.decorators import user_passes_test
from django.shortcuts import render, redirect

User = get_user_model()

# @user_passes_test(lambda u: u.is_staff)
def add_student(request):
    if request.method == "POST":
        user_form = CustomUserCreationForm(request.POST)
        student_form = StudentForm(request.POST)
        if user_form.is_valid() and student_form.is_valid():
            user = user_form.save(commit=False)
            user.role = 'student'
            user.save()
            student = student_form.save(commit=False)
            student.user = user
            student.save()
            messages.success(request, "Student added successfully.")
            return redirect('students:add_student')
    else:
        user_form = CustomUserCreationForm()
        student_form = StudentForm()
    return render(request, 'students/add_student.html', {
        'user_form': user_form,
        'student_form': student_form
    })

// File: templates/accounts/add_user.html
<h2>Add User</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/accounts/login.html
<!DOCTYPE html>
<html>
<head>
    <title>Teacher Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
</body>
</html>

// File: templates/attendance/add_attendance.html
<h2>Add Attendance</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/attendance/add_attendance_report.html
<h2>Add Attendance Report</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/exams/add_marks.html
<h2>Add Marks</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/exams/add_subject.html
<h2>Add Subject</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/faculty/add_class.html
<h2>Add Class</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/faculty/add_course.html
<h2>Add Course</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/faculty/add_department.html
<h2>Add Department</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/faculty/add_teacher.html
<h2>Add Teacher</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/faculty/register_teacher.html
<!DOCTYPE html>
<html>
<head>
    <title>Register Teacher</title>
</head>
<body>
    <h2>Teacher Registration</h2>
    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Register</button>
    </form>
    <a href="{% url 'login' %}">Login</a>
</body>
</html>

// File: templates/fees/add_fee_category.html
<h2>Add Fee Category</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/fees/add_fee_payment.html
<h2>Add Fee Payment</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/fees/add_fee_reminder.html
<h2>Add Fee Reminder</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/fees/add_fee_structure.html
<h2>Add Fee Structure</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add</button>
</form>

// File: templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academia - Smart College ERP System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }

        :root {
          --primary-color: #6366f1;
          --secondary-color: #8b5cf6;
          --accent-color: #06b6d4;
          --bg-dark: #0f0f23;
          --bg-darker: #0a0a1a;
          --bg-card: #1a1a2e;
          --text-primary: #ffffff;
          --text-secondary: #a1a1aa;
          --gradient-primary: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
          --gradient-secondary: linear-gradient(135deg, #06b6d4 0%, #3b82f6 100%);
          --shadow-glow: 0 0 20px rgba(99, 102, 241, 0.3);
        }

        body {
          font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
          background: var(--bg-dark);
          color: var(--text-primary);
          line-height: 1.6;
          overflow-x: hidden;
        }

        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }

        /* Navigation */
        .navbar {
          position: fixed;
          top: 0;
          width: 100%;
          background: rgba(15, 15, 35, 0.95);
          backdrop-filter: blur(10px);
          z-index: 1000;
          border-bottom: 1px solid rgba(99, 102, 241, 0.2);
        }

        .nav-container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
          display: flex;
          justify-content: space-between;
          align-items: center;
          height: 70px;
        }

        .nav-logo {
          display: flex;
          align-items: center;
          gap: 10px;
          font-size: 1.5rem;
          font-weight: bold;
          color: var(--text-primary);
        }

        .nav-logo i {
          color: var(--primary-color);
          font-size: 1.8rem;
        }

        .nav-menu {
          display: flex;
          align-items: center;
          gap: 30px;
        }

        .nav-link {
          color: var(--text-secondary);
          text-decoration: none;
          transition: color 0.3s ease;
          position: relative;
        }

        .nav-link:hover {
          color: var(--primary-color);
        }

        .nav-link::after {
          content: "";
          position: absolute;
          bottom: -5px;
          left: 0;
          width: 0;
          height: 2px;
          background: var(--gradient-primary);
          transition: width 0.3s ease;
        }

        .nav-link:hover::after {
          width: 100%;
        }

        .cta-button {
          background: var(--gradient-primary);
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 25px;
          cursor: pointer;
          transition: all 0.3s ease;
          font-weight: 500;
        }

        .cta-button:hover {
          transform: translateY(-2px);
          box-shadow: var(--shadow-glow);
        }

        .hamburger {
          display: none;
          flex-direction: column;
          cursor: pointer;
        }

        .hamburger span {
          width: 25px;
          height: 3px;
          background: var(--text-primary);
          margin: 3px 0;
          transition: 0.3s;
        }

        /* Hero Section */
        .hero {
          min-height: 100vh;
          display: flex;
          align-items: center;
          position: relative;
          overflow: hidden;
        }

        .hero-background {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          z-index: -1;
        }

        .floating-elements {
          position: absolute;
          width: 100%;
          height: 100%;
        }

        .binary-code {
          position: absolute;
          color: rgba(99, 102, 241, 0.1);
          font-family: "Courier New", monospace;
          font-size: 2rem;
          animation: float 6s ease-in-out infinite;
        }

        .binary-code:nth-child(1) {
          top: 20%;
          left: 10%;
          animation-delay: 0s;
        }

        .binary-code:nth-child(2) {
          top: 60%;
          right: 15%;
          animation-delay: 2s;
        }

        .binary-code:nth-child(3) {
          bottom: 30%;
          left: 20%;
          animation-delay: 4s;
        }

        .circuit-line {
          position: absolute;
          width: 200px;
          height: 2px;
          background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.3), transparent);
          animation: pulse 3s ease-in-out infinite;
        }

        .circuit-line:nth-child(4) {
          top: 40%;
          left: 0;
          transform: rotate(45deg);
        }

        .circuit-line:nth-child(5) {
          bottom: 40%;
          right: 0;
          transform: rotate(-45deg);
          animation-delay: 1.5s;
        }

        .hologram-chart {
          position: absolute;
          top: 30%;
          right: 10%;
          width: 100px;
          height: 100px;
          border: 2px solid rgba(139, 92, 246, 0.2);
          border-radius: 50%;
          animation: rotate 10s linear infinite;
        }

        .hologram-chart::before {
          content: "";
          position: absolute;
          top: 50%;
          left: 50%;
          width: 60%;
          height: 60%;
          border: 1px solid rgba(139, 92, 246, 0.3);
          border-radius: 50%;
          transform: translate(-50%, -50%);
        }

        @keyframes float {
          0%,
          100% {
            transform: translateY(0px);
          }
          50% {
            transform: translateY(-20px);
          }
        }

        @keyframes pulse {
          0%,
          100% {
            opacity: 0.3;
          }
          50% {
            opacity: 1;
          }
        }

        @keyframes rotate {
          from {
            transform: rotate(0deg);
          }
          to {
            transform: rotate(360deg);
          }
        }

        .hero-container {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 60px;
          align-items: center;
          padding-top: 70px;
        }

        .hero-title {
          font-size: 3.5rem;
          font-weight: 800;
          line-height: 1.1;
          margin-bottom: 20px;
        }

        .gradient-text {
          background: var(--gradient-primary);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .hero-tagline {
          font-size: 1.3rem;
          color: var(--accent-color);
          margin-bottom: 20px;
          font-weight: 500;
        }

        .hero-description {
          font-size: 1.1rem;
          color: var(--text-secondary);
          margin-bottom: 30px;
          line-height: 1.7;
        }

        .hero-cta {
          background: var(--gradient-primary);
          color: white;
          border: none;
          padding: 15px 30px;
          border-radius: 30px;
          font-size: 1.1rem;
          font-weight: 600;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 10px;
          transition: all 0.3s ease;
          width: fit-content;
        }

        .hero-cta:hover {
          transform: translateY(-3px);
          box-shadow: var(--shadow-glow);
        }

        .hero-visual {
          display: flex;
          justify-content: center;
          align-items: center;
        }

        .ai-illustration {
          position: relative;
          width: 300px;
          height: 300px;
        }

        .brain-icon {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          font-size: 4rem;
          color: var(--primary-color);
          animation: pulse-glow 2s ease-in-out infinite;
        }

        @keyframes pulse-glow {
          0%,
          100% {
            transform: translate(-50%, -50%) scale(1);
            filter: drop-shadow(0 0 10px rgba(99, 102, 241, 0.5));
          }
          50% {
            transform: translate(-50%, -50%) scale(1.1);
            filter: drop-shadow(0 0 20px rgba(99, 102, 241, 0.8));
          }
        }

        .data-nodes {
          position: absolute;
          width: 100%;
          height: 100%;
        }

        .node {
          position: absolute;
          width: 12px;
          height: 12px;
          background: var(--accent-color);
          border-radius: 50%;
          animation: node-pulse 3s ease-in-out infinite;
        }

        .node:nth-child(1) {
          top: 20%;
          left: 20%;
          animation-delay: 0s;
        }

        .node:nth-child(2) {
          top: 20%;
          right: 20%;
          animation-delay: 0.5s;
        }

        .node:nth-child(3) {
          bottom: 20%;
          left: 20%;
          animation-delay: 1s;
        }

        .node:nth-child(4) {
          bottom: 20%;
          right: 20%;
          animation-delay: 1.5s;
        }

        @keyframes node-pulse {
          0%,
          100% {
            transform: scale(1);
            opacity: 0.7;
          }
          50% {
            transform: scale(1.5);
            opacity: 1;
          }
        }

        /* Section Styles */
        section {
          padding: 100px 0;
        }

        .section-header {
          text-align: center;
          margin-bottom: 60px;
        }

        .section-header h2 {
          font-size: 2.5rem;
          font-weight: 700;
          margin-bottom: 15px;
          background: var(--gradient-primary);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .section-line {
          width: 80px;
          height: 4px;
          background: var(--gradient-primary);
          margin: 0 auto 20px;
          border-radius: 2px;
        }

        .section-header p {
          font-size: 1.1rem;
          color: var(--text-secondary);
          max-width: 600px;
          margin: 0 auto;
        }

        /* About Section */
        .about {
          background: var(--bg-darker);
        }

        .about-content p {
          font-size: 1.2rem;
          line-height: 1.8;
          color: var(--text-secondary);
          text-align: center;
          max-width: 800px;
          margin: 0 auto;
        }

        /* Modules Section */
        .modules-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 30px;
        }

        .module-card {
          background: var(--bg-card);
          padding: 40px 30px;
          border-radius: 15px;
          text-align: center;
          transition: all 0.3s ease;
          border: 1px solid rgba(99, 102, 241, 0.1);
          position: relative;
          overflow: hidden;
        }

        .module-card::before {
          content: "";
          position: absolute;
          top: 0;
          left: -100%;
          width: 100%;
          height: 100%;
          background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.1), transparent);
          transition: left 0.5s ease;
        }

        .module-card:hover::before {
          left: 100%;
        }

        .module-card:hover {
          transform: translateY(-10px);
          border-color: var(--primary-color);
          box-shadow: 0 20px 40px rgba(99, 102, 241, 0.2);
        }

        .module-icon {
          font-size: 3rem;
          color: var(--primary-color);
          margin-bottom: 20px;
        }

        .module-card h3 {
          font-size: 1.3rem;
          font-weight: 600;
          margin-bottom: 15px;
          color: var(--text-primary);
        }

        .module-card p {
          color: var(--text-secondary);
          line-height: 1.6;
        }

        /* AI Features Section */
        .ai-features {
          background: var(--bg-darker);
        }

        .ai-features-grid {
          display: grid;
          gap: 60px;
        }

        .ai-feature {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 50px;
          align-items: center;
        }

        .ai-feature:nth-child(even) {
          direction: rtl;
        }

        .ai-feature:nth-child(even) > * {
          direction: ltr;
        }

        .ai-feature-visual {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 300px;
        }

        .prediction-chart {
          position: relative;
          width: 250px;
          height: 200px;
          background: var(--bg-card);
          border-radius: 15px;
          padding: 20px;
          border: 1px solid rgba(99, 102, 241, 0.2);
        }

        .chart-bars {
          display: flex;
          align-items: end;
          justify-content: space-between;
          height: 120px;
          gap: 10px;
        }

        .bar {
          flex: 1;
          background: var(--gradient-primary);
          border-radius: 4px 4px 0 0;
          animation: bar-grow 2s ease-out;
        }

        @keyframes bar-grow {
          from {
            height: 0;
          }
        }

        .prediction-line {
          position: absolute;
          top: 30px;
          left: 20px;
          right: 20px;
          height: 2px;
          background: var(--accent-color);
          border-radius: 1px;
        }

        .prediction-line::after {
          content: "";
          position: absolute;
          right: -5px;
          top: -3px;
          width: 8px;
          height: 8px;
          background: var(--accent-color);
          border-radius: 50%;
          animation: pulse 2s ease-in-out infinite;
        }

        .note-classification {
          position: relative;
          width: 250px;
          height: 200px;
          background: var(--bg-card);
          border-radius: 15px;
          padding: 30px;
          border: 1px solid rgba(139, 92, 246, 0.2);
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
        }

        .document-icon {
          font-size: 3rem;
          color: var(--secondary-color);
          margin-bottom: 20px;
        }

        .classification-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
          margin-bottom: 20px;
        }

        .tag {
          background: rgba(139, 92, 246, 0.2);
          color: var(--secondary-color);
          padding: 4px 12px;
          border-radius: 15px;
          font-size: 0.8rem;
          font-weight: 500;
        }

        .ocr-lines {
          width: 100%;
        }

        .line {
          height: 2px;
          background: rgba(139, 92, 246, 0.3);
          margin: 5px 0;
          border-radius: 1px;
          animation: scan 3s ease-in-out infinite;
        }

        .line:nth-child(2) {
          width: 80%;
          animation-delay: 0.5s;
        }

        .line:nth-child(3) {
          width: 60%;
          animation-delay: 1s;
        }

        @keyframes scan {
          0%,
          100% {
            opacity: 0.3;
          }
          50% {
            opacity: 1;
          }
        }

        .ai-feature-content h3 {
          font-size: 1.8rem;
          font-weight: 700;
          margin-bottom: 20px;
          color: var(--text-primary);
        }

        .ai-feature-content p {
          font-size: 1.1rem;
          color: var(--text-secondary);
          line-height: 1.7;
          margin-bottom: 25px;
        }

        .ai-feature-content ul {
          list-style: none;
        }

        .ai-feature-content li {
          color: var(--text-secondary);
          margin-bottom: 10px;
          position: relative;
          padding-left: 25px;
        }

        .ai-feature-content li::before {
          content: "✓";
          position: absolute;
          left: 0;
          color: var(--accent-color);
          font-weight: bold;
        }

        /* How It Works Section */
        .workflow {
          display: flex;
          justify-content: center;
          align-items: center;
          gap: 40px;
          flex-wrap: wrap;
        }

        .workflow-step {
          text-align: center;
          max-width: 250px;
          position: relative;
        }

        .step-number {
          position: absolute;
          top: -10px;
          right: -10px;
          width: 30px;
          height: 30px;
          background: var(--gradient-primary);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          font-size: 0.9rem;
          z-index: 1;
        }

        .step-icon {
          width: 80px;
          height: 80px;
          background: var(--bg-card);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          margin: 0 auto 20px;
          font-size: 2rem;
          color: var(--primary-color);
          border: 2px solid rgba(99, 102, 241, 0.2);
          transition: all 0.3s ease;
        }

        .workflow-step:hover .step-icon {
          transform: scale(1.1);
          border-color: var(--primary-color);
          box-shadow: var(--shadow-glow);
        }

        .workflow-step h3 {
          font-size: 1.3rem;
          font-weight: 600;
          margin-bottom: 15px;
          color: var(--text-primary);
        }

        .workflow-step p {
          color: var(--text-secondary);
          line-height: 1.6;
        }

        .workflow-arrow {
          font-size: 1.5rem;
          color: var(--primary-color);
          animation: arrow-pulse 2s ease-in-out infinite;
        }

        @keyframes arrow-pulse {
          0%,
          100% {
            transform: translateX(0);
          }
          50% {
            transform: translateX(10px);
          }
        }

        /* Benefits Section */
        .benefits {
          background: var(--bg-darker);
        }

        .benefits-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 40px;
        }

        .benefit-item {
          text-align: center;
          padding: 30px 20px;
          transition: transform 0.3s ease;
        }

        .benefit-item:hover {
          transform: translateY(-5px);
        }

        .benefit-item i {
          font-size: 3rem;
          color: var(--accent-color);
          margin-bottom: 20px;
          display: block;
        }

        .benefit-item h3 {
          font-size: 1.3rem;
          font-weight: 600;
          margin-bottom: 15px;
          color: var(--text-primary);
        }

        .benefit-item p {
          color: var(--text-secondary);
          line-height: 1.6;
        }

        /* Demo Section */
        .demo-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
          gap: 30px;
        }

        .demo-card {
          background: var(--bg-card);
          border-radius: 15px;
          overflow: hidden;
          border: 1px solid rgba(99, 102, 241, 0.1);
          transition: all 0.3s ease;
        }

        .demo-card:hover {
          transform: translateY(-5px);
          border-color: var(--primary-color);
          box-shadow: 0 20px 40px rgba(99, 102, 241, 0.2);
        }

        .demo-placeholder {
          padding: 60px 30px;
          text-align: center;
          background: linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(139, 92, 246, 0.1) 100%);
        }

        .demo-placeholder i {
          font-size: 4rem;
          color: var(--primary-color);
          margin-bottom: 20px;
          display: block;
        }

        .demo-placeholder h4 {
          font-size: 1.3rem;
          font-weight: 600;
          margin-bottom: 10px;
          color: var(--text-primary);
        }

        .demo-placeholder p {
          color: var(--text-secondary);
        }

        /* CTA Section */
        .cta {
          background: var(--bg-darker);
          text-align: center;
        }

        .cta-content h2 {
          font-size: 2.5rem;
          font-weight: 700;
          margin-bottom: 20px;
          background: var(--gradient-primary);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .cta-content p {
          font-size: 1.2rem;
          color: var(--text-secondary);
          margin-bottom: 40px;
          max-width: 600px;
          margin-left: auto;
          margin-right: auto;
        }

        .cta-button-large {
          background: var(--gradient-primary);
          color: white;
          border: none;
          padding: 20px 40px;
          border-radius: 35px;
          font-size: 1.3rem;
          font-weight: 600;
          cursor: pointer;
          display: inline-flex;
          align-items: center;
          gap: 15px;
          transition: all 0.3s ease;
          margin-bottom: 30px;
        }

        .cta-button-large:hover {
          transform: translateY(-3px);
          box-shadow: var(--shadow-glow);
        }

        .cta-features {
          display: flex;
          justify-content: center;
          gap: 40px;
          flex-wrap: wrap;
        }

        .cta-feature {
          display: flex;
          align-items: center;
          gap: 10px;
          color: var(--text-secondary);
        }

        .cta-feature i {
          color: var(--accent-color);
        }

        /* Footer */
        .footer {
          background: var(--bg-darker);
          padding: 40px 0;
          border-top: 1px solid rgba(99, 102, 241, 0.1);
        }

        .footer-content {
          text-align: center;
        }

        .footer-logo {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 10px;
          font-size: 1.5rem;
          font-weight: bold;
          margin-bottom: 15px;
        }

        .footer-logo i {
          color: var(--primary-color);
        }

        .footer p {
          color: var(--text-secondary);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
          .nav-menu {
            position: fixed;
            left: -100%;
            top: 70px;
            flex-direction: column;
            background-color: var(--bg-darker);
            width: 100%;
            text-align: center;
            transition: 0.3s;
            box-shadow: 0 10px 27px rgba(0, 0, 0, 0.05);
            padding: 20px 0;
          }

          .nav-menu.active {
            left: 0;
          }

          .hamburger {
            display: flex;
          }

          .hamburger.active span:nth-child(2) {
            opacity: 0;
          }

          .hamburger.active span:nth-child(1) {
            transform: translateY(8px) rotate(45deg);
          }

          .hamburger.active span:nth-child(3) {
            transform: translateY(-8px) rotate(-45deg);
          }

          .hero-container {
            grid-template-columns: 1fr;
            gap: 40px;
            text-align: center;
          }

          .hero-title {
            font-size: 2.5rem;
          }

          .ai-feature {
            grid-template-columns: 1fr;
            gap: 30px;
          }

          .ai-feature:nth-child(even) {
            direction: ltr;
          }

          .workflow {
            flex-direction: column;
            gap: 30px;
          }

          .workflow-arrow {
            transform: rotate(90deg);
          }

          .cta-features {
            flex-direction: column;
            gap: 20px;
          }

          .section-header h2 {
            font-size: 2rem;
          }

          .modules-grid {
            grid-template-columns: 1fr;
          }

          .demo-grid {
            grid-template-columns: 1fr;
          }
        }

        @media (max-width: 480px) {
          .container {
            padding: 0 15px;
          }

          .hero-title {
            font-size: 2rem;
          }

          .hero-tagline {
            font-size: 1.1rem;
          }

          .hero-description {
            font-size: 1rem;
          }

          section {
            padding: 60px 0;
          }

          .ai-feature-visual {
            height: 200px;
          }

          .prediction-chart,
          .note-classification {
            width: 200px;
            height: 150px;
            padding: 20px;
          }
        }

        /* Smooth scrolling */
        html {
          scroll-behavior: smooth;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
          width: 8px;
        }

        ::-webkit-scrollbar-track {
          background: var(--bg-darker);
        }

        ::-webkit-scrollbar-thumb {
          background: var(--primary-color);
          border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
          background: var(--secondary-color);
        }

        /* Button ripple effect */
        button, .cta-button, .hero-cta {
            position: relative;
            overflow: hidden;
        }
        
        .ripple {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            transform: scale(0);
            animation: ripple-animation 0.6s linear;
            pointer-events: none;
        }
        
        @keyframes ripple-animation {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
     Navigation 
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <i class="fas fa-brain"></i>
                <span>Academia</span>
            </div>
            <div class="nav-menu">
                <a href="#home" class="nav-link">Home</a>
                <a href="#about" class="nav-link">About</a>
                <a href="#modules" class="nav-link">Modules</a>
                <a href="#ai-features" class="nav-link">AI Features</a>
                <a href="#benefits" class="nav-link">Benefits</a>
                <button class="cta-button">Get Started</button>
            </div>
            <div class="hamburger">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </nav>

     Hero Section 
    <section id="home" class="hero">
        <div class="hero-background">
            <div class="floating-elements">
                <div class="binary-code">01010101</div>
                <div class="binary-code">11001100</div>
                <div class="binary-code">10101010</div>
                <div class="circuit-line"></div>
                <div class="circuit-line"></div>
                <div class="hologram-chart"></div>
            </div>
        </div>
        <div class="hero-container">
            <div class="hero-content">
                <h1 class="hero-title">
                    <span class="gradient-text">Academia</span>
                    <br>Smart College ERP System
                </h1>
                <p class="hero-tagline">Transforming College Management with AI Insights</p>
                <p class="hero-description">
                    Experience the future of educational administration with our AI-powered ERP system 
                    that predicts student performance and intelligently classifies study materials.
                </p>
                <button class="hero-cta">
                    <span>Explore Features</span>
                    <i class="fas fa-arrow-right"></i>
                </button>
            </div>
            <div class="hero-visual">
                <div class="ai-illustration">
                    <div class="brain-icon">
                        <i class="fas fa-brain"></i>
                    </div>
                    <div class="data-nodes">
                        <div class="node"></div>
                        <div class="node"></div>
                        <div class="node"></div>
                        <div class="node"></div>
                    </div>
                    <div class="connection-lines"></div>
                </div>
            </div>
        </div>
    </section>

     About Project 
    <section id="about" class="about">
        <div class="container">
            <div class="section-header">
                <h2>About Academia</h2>
                <div class="section-line"></div>
            </div>
            <div class="about-content">
                <p>
                    Academia is a revolutionary smart ERP system designed specifically for colleges and educational institutions. 
                    Our platform integrates cutting-edge artificial intelligence to predict student performance based on attendance 
                    patterns and academic records, while automatically classifying and organizing study notes using advanced 
                    OCR and NLP technologies. Transform your institution's management with data-driven insights and intelligent automation.
                </p>
            </div>
        </div>
    </section>

     Modules Overview 
    <section id="modules" class="modules">
        <div class="container">
            <div class="section-header">
                <h2>System Modules</h2>
                <div class="section-line"></div>
                <p>Comprehensive management solutions for every aspect of your institution</p>
            </div>
            <div class="modules-grid">
                <div class="module-card">
                    <div class="module-icon">
                        <i class="fas fa-user-graduate"></i>
                    </div>
                    <h3>Student Management</h3>
                    <p>Complete student lifecycle management from admission to graduation with detailed profiles and academic tracking.</p>
                </div>
                <div class="module-card">
                    <div class="module-icon">
                        <i class="fas fa-chalkboard-teacher"></i>
                    </div>
                    <h3>Staff/Faculty Management</h3>
                    <p>Streamlined faculty administration, workload management, and performance evaluation systems.</p>
                </div>
                <div class="module-card">
                    <div class="module-icon">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <h3>Attendance Management</h3>
                    <p>Automated attendance tracking with real-time monitoring and intelligent pattern analysis.</p>
                </div>
                <div class="module-card">
                    <div class="module-icon">
                        <i class="fas fa-money-bill-wave"></i>
                    </div>
                    <h3>Fees Management</h3>
                    <p>Comprehensive fee collection, tracking, and financial reporting with automated reminders.</p>
                </div>
                <div class="module-card">
                    <div class="module-icon">
                        <i class="fas fa-clipboard-list"></i>
                    </div>
                    <h3>Exam & Result Management</h3>
                    <p>End-to-end examination management from scheduling to result publication and analysis.</p>
                </div>
            </div>
        </div>
    </section>

     AI/ML Features 
    <section id="ai-features" class="ai-features">
        <div class="container">
            <div class="section-header">
                <h2>AI-Powered Intelligence</h2>
                <div class="section-line"></div>
                <p>Harness the power of artificial intelligence for smarter educational management</p>
            </div>
            <div class="ai-features-grid">
                <div class="ai-feature">
                    <div class="ai-feature-visual">
                        <div class="prediction-chart">
                            <div class="chart-bars">
                                <div class="bar" style="height: 60%"></div>
                                <div class="bar" style="height: 80%"></div>
                                <div class="bar" style="height: 45%"></div>
                                <div class="bar" style="height: 90%"></div>
                                <div class="bar" style="height: 70%"></div>
                            </div>
                            <div class="prediction-line"></div>
                        </div>
                    </div>
                    <div class="ai-feature-content">
                        <h3>Student Performance Prediction</h3>
                        <p>
                            Our advanced machine learning algorithms analyze attendance patterns, assignment scores, 
                            and historical data to predict student performance and identify at-risk students early, 
                            enabling proactive intervention strategies.
                        </p>
                        <ul>
                            <li>Early warning system for struggling students</li>
                            <li>Personalized learning recommendations</li>
                            <li>Performance trend analysis</li>
                        </ul>
                    </div>
                </div>
                <div class="ai-feature">
                    <div class="ai-feature-visual">
                        <div class="note-classification">
                            <div class="document-icon">
                                <i class="fas fa-file-alt"></i>
                            </div>
                            <div class="classification-tags">
                                <span class="tag">Mathematics</span>
                                <span class="tag">Physics</span>
                                <span class="tag">Chemistry</span>
                            </div>
                            <div class="ocr-lines">
                                <div class="line"></div>
                                <div class="line"></div>
                                <div class="line"></div>
                            </div>
                        </div>
                    </div>
                    <div class="ai-feature-content">
                        <h3>Smart Note Classification</h3>
                        <p>
                            Intelligent OCR and NLP-powered system that automatically reads, understands, and 
                            classifies study notes by subject, topic, and difficulty level, making knowledge 
                            management effortless and searchable.
                        </p>
                        <ul>
                            <li>Automatic subject detection</li>
                            <li>Content categorization</li>
                            <li>Searchable knowledge base</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>

     How It Works 
    <section id="how-it-works" class="how-it-works">
        <div class="container">
            <div class="section-header">
                <h2>How It Works</h2>
                <div class="section-line"></div>
                <p>Simple three-step process to transform your institution</p>
            </div>
            <div class="workflow">
                <div class="workflow-step">
                    <div class="step-number">1</div>
                    <div class="step-icon">
                        <i class="fas fa-database"></i>
                    </div>
                    <h3>Data Entry</h3>
                    <p>Input student information, attendance records, and academic data into the system</p>
                </div>
                <div class="workflow-arrow">
                    <i class="fas fa-arrow-right"></i>
                </div>
                <div class="workflow-step">
                    <div class="step-number">2</div>
                    <div class="step-icon">
                        <i class="fas fa-brain"></i>
                    </div>
                    <h3>AI Analysis</h3>
                    <p>Our AI algorithms process and analyze the data to generate predictive insights</p>
                </div>
                <div class="workflow-arrow">
                    <i class="fas fa-arrow-right"></i>
                </div>
                <div class="workflow-step">
                    <div class="step-number">3</div>
                    <div class="step-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <h3>Insights & Actions</h3>
                    <p>Receive actionable insights and automated recommendations for better outcomes</p>
                </div>
            </div>
        </div>
    </section>

     Benefits 
    <section id="benefits" class="benefits">
        <div class="container">
            <div class="section-header">
                <h2>Key Benefits</h2>
                <div class="section-line"></div>
                <p>Discover how Academia transforms educational management</p>
            </div>
            <div class="benefits-grid">
                <div class="benefit-item">
                    <i class="fas fa-file-alt"></i>
                    <h3>Automated Reports</h3>
                    <p>Generate comprehensive reports automatically with real-time data visualization</p>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-bell"></i>
                    <h3>Real-Time Alerts</h3>
                    <p>Instant notifications for critical events and performance indicators</p>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-lightbulb"></i>
                    <h3>AI-Driven Insights</h3>
                    <p>Intelligent analytics that reveal hidden patterns and opportunities</p>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-clock"></i>
                    <h3>Time Saving</h3>
                    <p>Reduce administrative workload by up to 70% with automation</p>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-trophy"></i>
                    <h3>Improved Student Success</h3>
                    <p>Early intervention strategies lead to better academic outcomes</p>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-shield-alt"></i>
                    <h3>Data Security</h3>
                    <p>Enterprise-grade security ensures your data is always protected</p>
                </div>
            </div>
        </div>
    </section>

     Screenshots/Demo Section 
    <section id="demo" class="demo">
        <div class="container">
            <div class="section-header">
                <h2>System Preview</h2>
                <div class="section-line"></div>
                <p>Get a glimpse of Academia's intuitive interface</p>
            </div>
            <div class="demo-grid">
                <div class="demo-card">
                    <div class="demo-placeholder">
                        <i class="fas fa-chart-bar"></i>
                        <h4>Dashboard Overview</h4>
                        <p>Comprehensive analytics at a glance</p>
                    </div>
                </div>
                <div class="demo-card">
                    <div class="demo-placeholder">
                        <i class="fas fa-users"></i>
                        <h4>Student Management</h4>
                        <p>Detailed student profiles and tracking</p>
                    </div>
                </div>
                <div class="demo-card">
                    <div class="demo-placeholder">
                        <i class="fas fa-brain"></i>
                        <h4>AI Predictions</h4>
                        <p>Performance forecasting interface</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

     Call to Action 
    <section id="cta" class="cta">
        <div class="container">
            <div class="cta-content">
                <h2>Ready to Transform Your Institution?</h2>
                <p>Join hundreds of colleges already using Academia to improve their management efficiency and student outcomes.</p>
                <button class="cta-button-large">
                    <span>Get Started Today</span>
                    <i class="fas fa-rocket"></i>
                </button>
                <div class="cta-features">
                    <div class="cta-feature">
                        <i class="fas fa-check"></i>
                        <span>Free 30-day trial</span>
                    </div>
                    <div class="cta-feature">
                        <i class="fas fa-check"></i>
                        <span>No setup fees</span>
                    </div>
                    <div class="cta-feature">
                        <i class="fas fa-check"></i>
                        <span>24/7 support</span>
                    </div>
                </div>
            </div>
        </div>
    </section>

     Footer 
    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-logo">
                    <i class="fas fa-brain"></i>
                    <span>Academia</span>
                </div>
                <p>&copy; 2024 Academia. All rights reserved. Transforming education with AI.</p>
            </div>
        </div>
    </footer>

    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", function (e) {
            e.preventDefault()
            const target = document.querySelector(this.getAttribute("href"))
            if (target) {
              target.scrollIntoView({
                behavior: "smooth",
                block: "start",
              })
            }
          })
        })

        // Mobile menu toggle
        const hamburger = document.querySelector(".hamburger")
        const navMenu = document.querySelector(".nav-menu")

        hamburger.addEventListener("click", () => {
          hamburger.classList.toggle("active")
          navMenu.classList.toggle("active")
        })

        // Close mobile menu when clicking on a link
        document.querySelectorAll(".nav-link").forEach((n) =>
          n.addEventListener("click", () => {
            hamburger.classList.remove("active")
            navMenu.classList.remove("active")
          }),
        )

        // Navbar background on scroll
        window.addEventListener("scroll", () => {
          const navbar = document.querySelector(".navbar")
          if (window.scrollY > 50) {
            navbar.style.background = "rgba(15, 15, 35, 0.98)"
          } else {
            navbar.style.background = "rgba(15, 15, 35, 0.95)"
          }
        })

        // Intersection Observer for animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: "0px 0px -50px 0px",
        }

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.style.opacity = "1"
              entry.target.style.transform = "translateY(0)"
            }
          })
        }, observerOptions)

        // Observe all sections for scroll animations
        document.querySelectorAll("section").forEach((section) => {
          section.style.opacity = "0"
          section.style.transform = "translateY(30px)"
          section.style.transition = "opacity 0.6s ease, transform 0.6s ease"
          observer.observe(section)
        })

        // Observe cards and other elements
        document.querySelectorAll(".module-card, .benefit-item, .demo-card").forEach((card) => {
          card.style.opacity = "0"
          card.style.transform = "translateY(30px)"
          card.style.transition = "opacity 0.6s ease, transform 0.6s ease"
          observer.observe(card)
        })

        // Counter animation for statistics (if you want to add them later)
        function animateCounter(element, target, duration = 2000) {
          let start = 0
          const increment = target / (duration / 16)

          const timer = setInterval(() => {
            start += increment
            element.textContent = Math.floor(start)

            if (start >= target) {
              element.textContent = target
              clearInterval(timer)
            }
          }, 16)
        }

        // Parallax effect for hero background elements
        window.addEventListener("scroll", () => {
          const scrolled = window.pageYOffset
          const parallaxElements = document.querySelectorAll(".floating-elements > *")

          parallaxElements.forEach((element, index) => {
            const speed = 0.5 + index * 0.1
            element.style.transform = `translateY(${scrolled * speed}px)`
          })
        })

        // Add loading animation
        window.addEventListener("load", () => {
          document.body.classList.add("loaded")

          // Animate hero elements
          const heroTitle = document.querySelector(".hero-title")
          const heroTagline = document.querySelector(".hero-tagline")
          const heroDescription = document.querySelector(".hero-description")
          const heroCta = document.querySelector(".hero-cta")

          setTimeout(() => {
            heroTitle.style.opacity = "1"
            heroTitle.style.transform = "translateY(0)"
          }, 200)

          setTimeout(() => {
            heroTagline.style.opacity = "1"
            heroTagline.style.transform = "translateY(0)"
          }, 400)

          setTimeout(() => {
            heroDescription.style.opacity = "1"
            heroDescription.style.transform = "translateY(0)"
          }, 600)

          setTimeout(() => {
            heroCta.style.opacity = "1"
            heroCta.style.transform = "translateY(0)"
          }, 800)
        })

        // Initialize hero animations
        document.addEventListener("DOMContentLoaded", () => {
          const heroElements = [".hero-title", ".hero-tagline", ".hero-description", ".hero-cta"]

          heroElements.forEach((selector) => {
            const element = document.querySelector(selector)
            if (element) {
              element.style.opacity = "0"
              element.style.transform = "translateY(30px)"
              element.style.transition = "opacity 0.6s ease, transform 0.6s ease"
            }
          })
        })

        // Add click effects to buttons
        document.querySelectorAll("button, .cta-button, .hero-cta").forEach((button) => {
          button.addEventListener("click", function (e) {
            const ripple = document.createElement("span")
            const rect = this.getBoundingClientRect()
            const size = Math.max(rect.width, rect.height)
            const x = e.clientX - rect.left - size / 2
            const y = e.clientY - rect.top - size / 2

            ripple.style.width = ripple.style.height = size + "px"
            ripple.style.left = x + "px"
            ripple.style.top = y + "px"
            ripple.classList.add("ripple")

            this.appendChild(ripple)

            setTimeout(() => {
              ripple.remove()
            }, 600)
          })
        })
    </script>
</body>
</html>

// File: templates/students/add_student.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Add Student</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ccc; border-radius: 8px; }
        .messages { margin-bottom: 15px; }
        .messages .success { color: green; }
        .messages .error { color: red; }
        form div { margin-bottom: 12px; }
        label { display: block; font-weight: bold; margin-bottom: 4px; }
        input, select { width: 100%; padding: 8px; box-sizing: border-box; }
        button { padding: 8px 15px; background: #4CAF50; color: white; border: none; cursor: pointer; }
        button:hover { background: #45a049; }
        .errorlist { color: red; margin: 0; padding: 0; list-style: none; }
    </style>
</head>
<body>

<div class="container">
    <h2>Add New Student</h2>

    <!-- Display Django messages -->
    <div class="messages">
        {% if messages %}
            {% for message in messages %}
                <p class="{{ message.tags }}">{{ message }}</p>
            {% endfor %}
        {% endif %}
    </div>

    <form method="POST">
        {% csrf_token %}

        <h3>Account Details</h3>
        {{ user_form.non_field_errors }}
        {% for field in user_form %}
            <div>
                <label>{{ field.label_tag }}</label>
                {{ field }}
                {% if field.errors %}
                    <ul class="errorlist">
                        {% for error in field.errors %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}
            </div>
        {% endfor %}

        <h3>Student Details</h3>
        {{ student_form.non_field_errors }}
        {% for field in student_form %}
            <div>
                <label>{{ field.label_tag }}</label>
                {{ field }}
                {% if field.errors %}
                    <ul class="errorlist">
                        {% for error in field.errors %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}
            </div>
        {% endfor %}

        <button type="submit">Save Student</button>
    </form>
</div>

</body>
</html>

